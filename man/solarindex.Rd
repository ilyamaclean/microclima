% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/solartools.R
\name{solarindex}
\alias{solarindex}
\title{Calculates the solar index}
\usage{
solarindex(
  slope = NA,
  aspect = NA,
  localtime,
  lat = NA,
  long = 0,
  julian,
  dtm = array(0, dim = c(1, 1)),
  reso = 1,
  merid = round(long/15, 0) * 15,
  dst = 0,
  shadow = TRUE
)
}
\arguments{
\item{slope}{a single value, SpatRaster object, two-dimensional array or matrix of slopes (ยบ). If an array or matrix, then orientated as if derived using \code{\link[=is_raster]{is_raster()}}. I.e. \verb{[1, 1]} is the NW corner.}

\item{aspect}{a single value, SpatRaster object, two-dimensional array or matrix of aspects (ยบ). If an array or matrix, then orientated as if derived using \code{\link[=is_raster]{is_raster()}}. I.e. \verb{[1, 1]} is the NW corner.}

\item{localtime}{a single numeric value representing local time (decimal hour, 24 hour clock).}

\item{lat}{a single numeric value representing the mean latitude of the location for which the solar index is required (decimal degrees, -ve south of the equator).}

\item{long}{a single numeric value representing the mean longitude of the location for which the solar index is required (decimal degrees, -ve west of Greenwich meridian).}

\item{julian}{a single integer representing the Julian day as returned by \code{\link[=julday]{julday()}}.}

\item{dtm}{an optional SpatRaster object, two-dimensional array or matrix of elevations (m). If not a SpatRaster, orientated as if derived from a raster using \code{\link[=is_raster]{is_raster()}}. I.e. \verb{[1, 1]} is the NW corner.}

\item{reso}{a single numeric value representing the spatial resolution of \code{dtm} (m).}

\item{merid}{an optional numeric value representing the longitude (decimal degrees) of the local time zone meridian (0 for GMT). Default is \code{round(long / 15, 0) * 15}}

\item{dst}{an optional numeric value representing the time difference from the timezone meridian (hours, e.g. +1 for BST if \code{merid} = 0).}

\item{shadow}{an optional logical value indicating whether topographic shading should be considered (TRUE = Yes, FALSE = No).}
}
\value{
If shadow is \code{TRUE}, a SpatRaster object or a two-dimensional array of numeric values representing the proportion of direct beam radiation incident on an inclined surface, accounting for topographic shading.

If shadow is \code{FALSE}, a raster object or a two-dimensional array of numeric values representing the proportion of direct beam radiation incident on an inclined surface, not accounting for topographic shading.

If no \code{dtm} is provided, a vector, array or single numeric value of the proportion of direct beam radiation incident on the inclined surfaces specified by \code{slope} and \code{aspect}, and topographic shading is ignored.
}
\description{
\code{solarindex} is used to calculate the proportion of direct beam radiation incident on an inclined surface at a specified time and location.
}
\details{
If \code{slope} is unspecified, and \code{dtm} is a SpatRaster, \code{slope} and \code{aspect} are calculated from
the raster. If \code{slope} is unspecified, and \code{dtm} is not a SpatRaster, the slope and aspect
are set to zero. If \code{lat} is unspecified, and \code{dtm} is a raster with a coordinate reference
system defined, \code{lat} and \code{long} are calculated from the raster. If \code{lat} is unspecified,
and \code{dtm} is not a raster, or a raster without a coordinate reference system defined, an
error is returned. If \code{dtm} is specified, then the projection system used must be such that
units of x, y and z are identical. Use \code{\link[terra:project]{terra::project()}} to convert the projection to a
Universal Transverse Mercator type projection system. If \code{dtm} is a raster object, a raster
object is returned.
}
\examples{
library(terra)
jd <- julday (2010, 6, 21) # Julian day
# slope, aspect, lat & long calculated from raster
si1 <- solarindex(localtime = 8, julian = jd, dtm = rast(dtm1m))
si2 <- solarindex(localtime = 8, julian = jd, dtm = rast(dtm1m), shadow = FALSE)
par(mfrow = c(2, 1))
plot(si1, main = "Solar index with topographic shadowing")
plot(si2, main = "Solar index without topographic shadowing")
ll <- latlongfromraster(rast(dtm1m))
solarindex(0, 0, 8, lat = ll$lat, long = ll$long, jd)
}
